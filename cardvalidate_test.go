package cardvalidate

import (
	"errors"
	"testing"
	"time"
)

func TestValidateValid(t *testing.T) {
	tests := []struct {
		number  string
		expDate string
	}{
		{"4111111111111111", "02/2024"},
		{"4111111111111111", "12/2028"},
		{"6212345678901265", "11/2025"},
		{"6212345678901232", "08/2027"},
		{"6212345678900028", "04/2027"},
		{"6212345678900036", "06/2025"},
		{"6212345678900085", "01/2026"},
		{"6212345678900093", "09/2026"},
		{"62123456789002", "09/2028"},
		{"621234567890003", "02/2028"},
		{"62123456789000003", "05/2026"},
		{"621234567890000002", "06/2028"},
		{"6212345678900000003", "02/2028"},
		{"371255422728692", "07/2027"},
		{"343030658955854", "10/2025"},
		{"343809910826775", "09/2028"},
		{"375114534473083", "05/2027"},
		{"346592318638144", "12/2024"},
		{"370558655421039", "07/2027"},
		{"375658534489747", "12/2025"},
		{"345923078383525", "09/2025"},
		{"346812451160932", "02/2028"},
		{"348236720246983", "05/2028"},
		{"378282246310005", "11/2024"},
		{"371449635398431", "11/2027"},
		{"378734493671000", "10/2027"},
		{"30569309025904", "05/2026"},
		{"38520000023237", "09/2025"},
		{"36683902117168", "01/2026"},
		{"36127951797629", "06/2025"},
		{"30351447989048", "07/2027"},
		{"36429462154559", "09/2026"},
		{"30006032187206", "05/2025"},
		{"30284611236484", "03/2025"},
		{"30195830207181", "09/2027"},
		{"38754423755923", "09/2026"},
		{"30027676109538", "09/2028"},
		{"38126374068061", "11/2026"},
		{"6011111111111117", "03/2027"},
		{"6011000990139424", "12/2025"},
		{"6011747305012486", "11/2024"},
		{"6011870537589871", "03/2028"},
		{"6011615793627497", "03/2026"},
		{"6011883712576324", "04/2028"},
		{"6011204723759652", "07/2028"},
		{"6011413989493944", "11/2025"},
		{"6011635930056772", "08/2026"},
		{"6011646259058190", "05/2028"},
		{"6011299144770809", "01/2027"},
		{"6011499150862066", "01/2025"},
		{"3530111333300000", "01/2026"},
		{"3566002020360505", "11/2025"},
		{"3550998650131033", "09/2025"},
		{"3566111111111113", "09/2026"},
		{"5555555555554444", "12/2024"},
		{"5105105105105100", "04/2026"},
		{"5123856130355023", "03/2026"},
		{"5429351731128749", "07/2025"},
		{"5408200584401528", "05/2025"},
		{"5369356574320040", "01/2028"},
		{"5483000279065275", "10/2025"},
		{"5447025105449174", "04/2027"},
		{"5532053336988980", "04/2028"},
		{"5594881983691894", "05/2025"},
		{"5439223588334647", "04/2028"},
		{"5246132897434423", "05/2026"},
		{"4111111111111111", "07/2027"},
		{"4012888888881881", "08/2027"},
		{"4539723775949752", "11/2024"},
		{"4539983514929271", "09/2027"},
		{"4556299996115273", "01/2026"},
		{"4556648760621678", "01/2028"},
		{"4556134715955412", "05/2028"},
		{"4539419864694884", "05/2026"},
		{"4024007173079426", "10/2026"},
		{"4539441071007551", "09/2025"},
		{"4539984459069503", "02/2025"},
	}

	currentDate := time.Date(2024, 1, 1, 0, 0, 0, 0, time.UTC)

	for _, tc := range tests {
		err := validate(tc.number, tc.expDate, currentDate)
		if err != nil {
			t.Errorf("unexpected validation error (%s, %s): %s", tc.number, tc.expDate, err)
		}
	}
}

func TestValidateInvalid(t *testing.T) {
	tests := []struct {
		number  string
		expDate string
		err     error
	}{
		// Malformed card numbers.
		{"", "08/2028", ErrMalformedNumber},
		{"abcdabcdabcdabcd", "08/2028", ErrMalformedNumber},
		{"123", "08/2028", ErrMalformedNumber},
		{"123123123123123123123123123123", "08/2028", ErrMalformedNumber},

		// Malformed expiration dates.
		{"4539441071007551", "", ErrMalformedDate},
		{"4539984459069503", "-99/-100", ErrMalformedDate},

		// Expired cards.
		{"5439223588334647", "01/2024", ErrCardExpired},
		{"5246132897434423", "05/2023", ErrCardExpired},
		{"4111111111111111", "07/2022", ErrCardExpired},
		{"4012888888881881", "08/2020", ErrCardExpired},
		{"4539723775949752", "11/2021", ErrCardExpired},

		// Unknown issuers.
		{"9550998650131033", "09/2025", ErrUnknownIssuer},
		{"9566111111111113", "09/2026", ErrUnknownIssuer},
		{"7555555555554444", "12/2024", ErrUnknownIssuer},
		{"1105105105105100", "04/2026", ErrUnknownIssuer},
		{"8123856130355023", "03/2026", ErrUnknownIssuer},

		// Invalid account numbers (based on Luhn's check).
		{"4111111111111121", "02/2024", ErrInvalidAccountNumber},
		{"4111111111111611", "12/2028", ErrInvalidAccountNumber},
		{"6212345678903265", "11/2025", ErrInvalidAccountNumber},
		{"6212345678902232", "08/2027", ErrInvalidAccountNumber},
		{"6212345678910128", "04/2027", ErrInvalidAccountNumber},
		{"6212345678911036", "06/2025", ErrInvalidAccountNumber},
	}

	currentDate := time.Date(2024, 1, 1, 0, 0, 0, 0, time.UTC)

	for _, tc := range tests {
		err := validate(tc.number, tc.expDate, currentDate)
		if !errors.Is(err, tc.err) {
			t.Errorf("unexpected error (%s, %s): want %s have %s",
				tc.number, tc.expDate, tc.err, err)
		}
	}
}
